{"version":3,"sources":["Editor.js","hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAiDeA,EApCA,SAACC,GACd,IAAQC,EAA2CD,EAA3CC,SAAUC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SACtC,EAAwBC,oBAAS,GAAK,mBAA/BC,EAAI,KAAEC,EAAO,KAMpB,OACE,yBAAKC,UAAS,2BAAsBF,EAAO,GAAK,cAC9C,yBAAKE,UAAU,gBACZN,EACD,4BACEO,QAAS,kBAAMF,GAAQ,SAACG,GAAQ,OAAMA,MACtCF,UAAU,OAEV,kBAAC,IAAe,CAACG,KAAML,EAAOM,IAAgBC,QAGlD,kBAAC,aAAgB,CACfC,eAhBN,SAAsBC,EAAQC,EAAMb,GAClCC,EAASD,IAgBLA,MAAOA,EACPK,UAAU,sBACVS,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMnB,EACNoB,MAAO,WACPC,aAAa,KAGjB,gCCzCS,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAFO,iBAEgBF,EAC7B,EAA0BnB,oBAAS,WACjC,IAAMsB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EACKG,KAAKC,MAAMJ,GAEQ,oBAAjBF,EACFA,IAEAA,KAET,mBAVKtB,EAAK,KAAE6B,EAAQ,KAetB,OAHAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUhC,MAChD,CAACuB,EAAavB,IACV,CAACA,EAAO6B,GC8CFI,MA5Df,WACE,MAAwBb,EAAgB,OAAQ,IAAG,mBAA5Cc,EAAI,KAAEC,EAAO,KACpB,EAAsBf,EAAgB,MAAO,IAAG,mBAAzCgB,EAAG,KAAEC,EAAM,KAClB,EAAoBjB,EAAgB,KAAM,IAAG,mBAAtCkB,EAAE,KAAEC,EAAK,KAChB,EAA4BrC,mBAAS,IAAG,mBAAjCsC,EAAM,KAAEC,EAAS,KAoBxB,OAlBAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WAEzBF,EAAU,mCAAD,OAGCP,EAAI,mCACHE,EAAG,qCACFE,EAAE,iDAKb,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,oCACE,yBAAKjC,UAAU,iBACb,kBAAC,EAAM,CACLP,SAAS,MACTC,YAAY,OACZC,MAAOkC,EACPjC,SAAUkC,IAEZ,kBAAC,EAAM,CACLrC,SAAS,MACTC,YAAY,MACZC,MAAOoC,EACPnC,SAAUoC,IAEZ,kBAAC,EAAM,CACLvC,SAAS,aACTC,YAAY,KACZC,MAAOsC,EACPrC,SAAUsC,KAGd,yBAAKlC,UAAU,QACb,4BACEmC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YC/CFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCMdQ,IAASC,OACP,kBAAC,IAAMC,WAAU,KACf,kBAAC,EAAG,OAENC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63d49388.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"react-codemirror2\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/css/css\";\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHtml5, faCss3Alt, faJs } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Editor = (props) => {\n  const { language, displayName, value, onChange } = props;\n  const [open, setOpen] = useState(true);\n\n  function handleChange(editor, data, value) {\n    onChange(value);\n  }\n\n  return (\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          onClick={() => setOpen((prevOpen) => !prevOpen)}\n          className=\"btn\"\n        >\n          <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\n        </button>\n      </div>\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lineWrapping: true,\n          lint: true,\n          mode: language,\n          theme: \"material\",\n          lineNumbers: true,\n        }}\n      />\n      <div></div>\n    </div>\n  );\n};\n\nexport default Editor;\n","import { useState, useEffect } from \"react\";\n\nconst PREFIX = \"codepen-clone-\";\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    if (jsonValue != null) {\n      return JSON.parse(jsonValue);\n    }\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n  return [value, setValue];\n}\n","import \"./App.css\";\nimport React from \"react\";\nimport Editor from \"./Editor\";\nimport { useState, useEffect } from \"react\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\n\nfunction App() {\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [js, setJs] = useLocalStorage(\"js\", \"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      /* Source Document Code as function */\n      setSrcDoc(\n        `\n        <html>\n        <body>${html}</body>\n        <style>${css}</style>\n        <script>${js}</script>\n       \n      </html>\n      `\n      );\n    }, 250);\n\n    return () => clearTimeout(timeout);\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\n// import ReactDOM from 'react-dom/client';\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}